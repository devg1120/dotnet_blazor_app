@using System.Text
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Util
@using BlazorDatasheet.Render.DefaultComponents
@inherits SheetComponentBase

<!-- The cell content -->

<div style="display: flex;">
    @if (Cell.Icon != null)
    {
        <div
            style="margin-right:2px; float:left; color: @(Cell.Format?.IconColor ?? "var(--icon-color)");">
            @Icon
        </div>
    }
    @switch (Cell.CellType)
    {
        case "default":
            <div style="width: 100%;">
                @Cell.FormattedString
            </div>
            break;
        case "boolean":
            <BoolRenderer Cell="Cell" Sheet="Sheet"/>
            break;
        case "select":
            <SelectRenderer Cell="Cell" Sheet="Sheet"/>
            break;
    }
</div>

@code {


    [Parameter, EditorRequired] public VisualCell Cell { get; set; } = null!;

    [Parameter, EditorRequired] public Sheet Sheet { get; set; } = null!;

    [Parameter] public bool IsDirty { get; set; }

    [Parameter] public RenderFragment Icon { get; set; }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(Cell):
                    Cell = (VisualCell)parameter.Value;
                    break;
                case nameof(Sheet):
                    Sheet = (Sheet)parameter.Value;
                    break;
                case nameof(IsDirty):
                    IsDirty = (bool)parameter.Value;
                    break;
                case nameof(Icon):
                    Icon = (RenderFragment)parameter.Value;
                    break;
            }
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected override bool ShouldRender()
    {
        return IsDirty;
    }

}