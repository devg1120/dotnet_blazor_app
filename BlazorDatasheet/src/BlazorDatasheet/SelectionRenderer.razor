@using Region = BlazorDatasheet.DataStructures.Geometry.Region
@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Core.Layout
@using BlazorDatasheet.Core.Selecting
@using BlazorDatasheet.DataStructures.Geometry
@using BlazorDatasheet.DataStructures.Intervals
@using BlazorDatasheet.DataStructures.Store
@using BlazorDatasheet.Portal
@inherits SheetComponentBase

<!-- Render the temp selection (currently selected region) -->
@if (BoundedSelectingRegion != null && BoundedSelectingRegion?.Area > 0)
{
    <!-- We split into regions around the cell's start position, so that the cell's 
    start position shows the renderer underneath it -->
    var brokenRegions = BoundedSelectingRegion.Break(GetRegion(Sheet.Selection.SelectingStartPosition));
    foreach (var region in brokenRegions)
    {
        <BoxOverlayRenderer
            BackgroundVisible="@true"
            BorderThickness="0"
            X="GetLeft(region)"
            Y="GetTop(region)"
            Width="GetWidth(region)"
            Height="GetHeight(region)"/>
    }

    <!-- now render the border around the whole thing -->
    <BoxOverlayRenderer
        BackgroundVisible="@false"
        BorderThickness="2"
        X="GetLeft(BoundedSelectingRegion)"
        Y="GetTop(BoundedSelectingRegion)"
        Width="GetWidth(BoundedSelectingRegion)"
        Height="GetHeight(BoundedSelectingRegion)"/>
}

<!-- render the selections that exist in the sheet -->
@if (!Sheet.Selection.IsEmpty())
{
    foreach (var region in Sheet.Selection.Regions)
    {
        var boundedRegion = region.GetIntersection(Sheet.Region);
        var isActiveRegion = region.Equals(Sheet.Selection.ActiveRegion);
        if (boundedRegion == null)
            continue;
        <!-- if it's the active region, render around the active position -->
        if (isActiveRegion)
        {
            var brokenRegions = boundedRegion
                .Break(GetRegion(Sheet.Selection.ActiveCellPosition));
            foreach (var brokenRegion in brokenRegions)
            {
                <BoxOverlayRenderer
                    BackgroundVisible="true"
                    BorderThickness="0"
                    X="GetLeft(brokenRegion)"
                    Y="GetTop(brokenRegion)"
                    Width="GetWidth(brokenRegion)"
                    Height="GetHeight(brokenRegion)"/>
            }
        }

        <!-- now render the border around the whole region. No fill on active region because we've filled it already -->
        <BoxOverlayRenderer
            BackgroundVisible="@(!isActiveRegion)"
            BorderThickness="@(isActiveRegion ? 2 : 0)"
            X="GetLeft(boundedRegion)"
            Y="GetTop(boundedRegion)"
            Width="GetWidth(boundedRegion)"
            Height="GetHeight(boundedRegion)"/>
    }
}

<!-- row and column heading highlights -->

<Portal For="Col" DatasheetId="@DatasheetId">
    @{
        var intervals = _colHighlights.GetAllIntervals();
    }
    @foreach (var interval in intervals)
    {
        <BoxOverlayRenderer
            BackgroundVisible="true"
            BorderThickness="0"
            BackgroundColor="var(--active-header-bg-color)"
            X="GetColSelectionLeft(interval.start)"
            Y="0"
            Width="@(GetColSelectionWidth(interval.start, interval.end - interval.start + 1) - 1)"
            Height="@(CellLayoutProvider.ColHeadingHeight - 1)">
        </BoxOverlayRenderer>
    }
</Portal>

<Portal For="Row" DatasheetId="@DatasheetId">
    @{
        var intervals = _rowHighlights.GetAllIntervals();
    }
    @foreach (var interval in intervals)
    {
        <BoxOverlayRenderer
            BackgroundVisible="true"
            BorderThickness="0"
            BackgroundColor="var(--active-header-bg-color)"
            X="0"
            Y="GetRowSelectionTop(interval.start)"
            Width="@(CellLayoutProvider.RowHeadingWidth - 1)"
            Height="@(GetRowSelectionHeight(interval.start, interval.end - interval.start + 1) - 1)">
        </BoxOverlayRenderer>
    }
</Portal>


@code {

    [Parameter, EditorRequired] public CellLayoutProvider CellLayoutProvider { get; set; } = null!;

    private Sheet? _sheet;

    [Parameter, EditorRequired] public Sheet Sheet { get; set; } = null!;

    [CascadingParameter(Name = "DatasheetId")]
    public string DatasheetId { get; set; } = default!;

    private IRegion? BoundedSelectingRegion => Sheet.Selection.SelectingRegion?.GetIntersection(Sheet.Region);

    private double GetLeft(IRegion region) => CellLayoutProvider.ComputeLeftPosition(region);
    private double GetTop(IRegion region) => CellLayoutProvider.ComputeTopPosition(region);
    private double GetWidth(IRegion region) => CellLayoutProvider.ComputeWidth(region);
    private double GetHeight(IRegion region) => CellLayoutProvider.ComputeHeight(region);

    private double GetRowSelectionTop(int row) =>
        CellLayoutProvider.ComputeTopPosition(row) -
        (CellLayoutProvider.IncludeColHeadings ? CellLayoutProvider.ColHeadingHeight : 0);

    private double GetRowSelectionHeight(int row, int rowSpan) => CellLayoutProvider.ComputeHeight(row, rowSpan);

    private double GetColSelectionLeft(int col) =>
        CellLayoutProvider.ComputeLeftPosition(col) -
        (CellLayoutProvider.IncludeRowHeadings ? CellLayoutProvider.RowHeadingWidth : 0);

    private double GetColSelectionWidth(int col, int colSpan) => CellLayoutProvider.ComputeWidth(col, colSpan);


    protected override void OnParametersSet()
    {
        if (_sheet != Sheet)
        {
            if (_sheet != null)
            {
                _sheet.Selection.SelectionChanged -= OnSelectionChanged;
                _sheet.Selection.SelectingChanged -= OnSelectingChanged;
            }

            _sheet = Sheet;

            if (_sheet == null) return;

            _sheet.Selection.SelectionChanged += OnSelectionChanged;
            _sheet.Selection.SelectingChanged += OnSelectingChanged;
            _sheet.Rows.Removed += (_, _) => UpdateHeadingHighlights();
            _sheet.Columns.Removed += (_, _) => UpdateHeadingHighlights();
            _sheet.Editor.EditBegin += (_, _) => StateHasChanged();
        }
    }

    // Returns the region that the position covers (may be > 1 because of merged cells)
    private IRegion GetRegion(CellPosition position)
    {
        var merge = Sheet.Cells.GetMerge(position.row, position.col);
        if (merge != null)
            return merge;
        else
            return new Region(position.row, position.col);
    }

    private void OnSelectionChanged(object? sender, IEnumerable<IRegion> regions)
    {
        UpdateHeadingHighlights();
        StateHasChanged();
    }

    private void OnSelectingChanged(object? sender, IRegion? region)
    {
        UpdateHeadingHighlights();
        StateHasChanged();
    }

    private Range1DStore<bool> _rowHighlights = new(false);
    private Range1DStore<bool> _colHighlights = new(false);

    private void UpdateHeadingHighlights()
    {
        _rowHighlights.Clear();
        _colHighlights.Clear();

        foreach (var region in Sheet.Selection.Regions)
        {
            var bounded = region.GetIntersection(Sheet.Region);
            if (bounded == null)
                continue;

            _rowHighlights.Set(bounded.Top, bounded.Bottom, true);
            _colHighlights.Set(bounded.Left, bounded.Right, true);
        }

        if (Sheet.Selection.IsSelecting)
        {
            var bounded = Sheet.Selection.SelectingRegion!.GetIntersection(Sheet.Region);
            if (bounded == null)
                return;

            _rowHighlights.Set(bounded.Top, bounded.Bottom, true);
            _colHighlights.Set(bounded.Left, bounded.Right, true);
        }
    }

}