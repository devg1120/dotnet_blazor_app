@using BlazorDatasheet.Core.Data
@using BlazorDatasheet.Render
@using BlazorDatasheet.Render.DefaultComponents

@for (int j = VisualSheet.Viewport.VisibleRegion.Left; j <= VisualSheet.Viewport.VisibleRegion.Right; j++)
{
    var col = j;
    var visualCell = VisualSheet.GetVisualCell(Row, col);

    if (!visualCell.IsVisible)
        continue;

    var k = col;

    var rowSpan = 1;
    var colSpan = 1;
    var dataCol = col;
    var dataRow = Row;

    if (!Virtualise && visualCell.Merge != null)
    {
        if (!Sheet.Rows.IsVisible(Row) || !Sheet.Rows.IsVisible(col))
            continue;

        if (Sheet.Rows.IsVisible(visualCell.Merge.Top) && Sheet.Columns.IsVisible(visualCell.Merge.Left))
        {
            if (visualCell.Merge.Top == Row && visualCell.Merge.Left == col)
            {
                rowSpan = Sheet.Rows.CountVisible(Row, visualCell.Merge.Bottom);
                colSpan = Sheet.Columns.CountVisible(col, visualCell.Merge.Right);
                dataCol = visualCell.Merge.Left;
                dataRow = visualCell.Merge.Top;
            }
            else
                continue;
        }
        else // cell top left is not visible
        {
            var nextVisibleRow = Sheet.Rows.GetNextVisible(visualCell.Merge.Top - 1);
            var nextVisibleCol = Sheet.Columns.GetNextVisible(visualCell.Merge.Left - 1);

            if (nextVisibleCol == col && nextVisibleRow == Row)
            {
                rowSpan = Sheet.Rows.CountVisible(Row, visualCell.Merge.Bottom);
                colSpan = Sheet.Columns.CountVisible(col, visualCell.Merge.Right);
                dataCol = visualCell.Merge.Left;
                dataRow = visualCell.Merge.Top;
                visualCell = VisualSheet.GetVisualCell(visualCell.Merge.Top, visualCell.Merge.Left);
            }
            else
            {
                continue;
            }
        }
    }

    <td
        @key="k"
        data-row="@dataRow"
        data-col="@dataCol"
        colspan="@colSpan"
        rowspan="@rowSpan"
        class="sheet-cell"
        style="@visualCell.FormatStyleString">
        <div style="display: flex;">
            @if (visualCell.Icon != null)
            {
                <div
                    style="margin-right:2px; float:left; color: @(visualCell.Format?.IconColor ?? "var(--icon-color)");">
                    @GetIconRenderFragment(visualCell.Icon)
                </div>
            }
            @switch (visualCell.CellType)
            {
                case "default":
                case "datetime":
                    <div style="width: 100%;">
                        @visualCell.FormattedString
                    </div>
                    break;
                case "boolean":
                    <BoolRenderer Cell="visualCell" Sheet="Sheet"/>
                    break;
                case "select":
                    <SelectRenderer Cell="visualCell" Sheet="Sheet"/>
                    break;

                default:
                    <DynamicComponent
                        Parameters="@GetCellRendererParameters(visualCell)"
                        Type="@GetCellRendererType(visualCell.CellType)"/>
                    break;
            }
        </div>
    </td>
}

@code {

    [Parameter, EditorRequired] public VisualSheet VisualSheet { get; set; } = null!;

    [Parameter, EditorRequired] public Sheet Sheet { get; set; } = null!;

    [Parameter, EditorRequired] public bool IsDirty { get; set; }

    [Parameter, EditorRequired] public int Row { get; set; }

    [Parameter, EditorRequired] public bool Virtualise { get; set; }

    [Parameter, EditorRequired] public Dictionary<string, CellTypeDefinition> CustomCellTypeDefinitions { get; set; } = null!;

    [Parameter, EditorRequired] public Dictionary<string, RenderFragment> Icons { get; set; } = null!;

    protected override bool ShouldRender() => IsDirty;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private Type GetCellRendererType(string type)
    {
        if (CustomCellTypeDefinitions.TryGetValue(type, out var definition))
            return definition.RendererType;

        return typeof(TextRenderer);
    }

    private Dictionary<string, object> GetCellRendererParameters(VisualCell visualCell)
    {
        return new Dictionary<string, object>()
        {
            { "Cell", visualCell },
            { "Sheet", Sheet }
        };
    }

    private RenderFragment GetIconRenderFragment(string? cellIcon)
    {
        if (cellIcon != null && Icons.TryGetValue(cellIcon, out var rf))
            return rf;
        return _ => { };
    }


}