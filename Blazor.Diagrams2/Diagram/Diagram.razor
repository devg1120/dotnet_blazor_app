@using Excubo.Blazor.Diagrams.__Internal
@using Excubo.Blazor.Diagrams.Extensions

<style>
@@keyframes diagram-node-selected{0%{stroke-dashoffset:0;}100%{stroke-dashoffset:-10;}}
</style>
@using (var temporary_culture = new CultureSwapper())
{
    <div style="width: 100%; height: 100%; position: relative; overflow: hidden; @(NavigationSettings.DisablePanning ? "" : "cursor: grab;")
                @(ShowGridLines ? "background-image: linear-gradient(90deg, #eee .1em, transparent .1em), linear-gradient(#eee .1em, transparent .1em);": "")
                background-size: @(GridLineDistance * NavigationSettings.Zoom)px @(GridLineDistance * NavigationSettings.Zoom)px;
                background-position-x: @(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.X)px;
                background-position-y: @(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.Y)px;
                @additional_style" @attributes="other_additional_attributes"
         @ref="canvas"
         tabindex="-1"
         @onkeydown="OnKeyPress"
         @onmousemove="OnMouseMove"
         @onmousemove:preventDefault
         @onmousedown="OnMouseDown"
         @onmouseup="OnMouseUp"
         @onwheel="OnMouseWheel"
         @onwheel:preventDefault>
        <CascadingValue Value="@this" IsFixed="true">
            @using (var temporary_culture2 = new CultureSwapper())
            {
                <!-- area for nodes and links -->
                <svg style=" width: 100%; height: 100%; position: absolute; top: 0; left: 0;">
                    <g transform="translate(@(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.X)
                                    @(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.Y))">
                        @using (var suspension = temporary_culture2.Suspend())
                        {
                            @ChildContent
                        }
                    </g>
                </svg>
                <!-- area for node contents -->
                <div style="position: absolute;
                    left: @(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.X)px;
                    top: @(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.Y)px;
                    right: -200px;
                    bottom: -200px;
                    pointer-events: none;">
                    <Renderer @ref="node_content_renderer" />
                </div>
                <svg style=" width: 100%; height: 100%; position: absolute; top: 0; left: 0; pointer-events: none">
                    <g transform="translate(@(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.X)
                                    @(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.Y))">
                        <Renderer @ref="node_border_renderer" />
                        <SelectRegion @ref="select_region" />
                    </g>
                </svg>
                <!-- area for nodes in the node library -->
                <NodeLibraryWrapper NodeLibrary="NodeLibrary" @ref="node_library_wrapper" />
                @if (LinkSelectorSettings != null)
                {
                    <DefaultLinkSelector Position="LinkSelectorSettings.Position" Type="Links.DefaultType" TypeChanged="Links.DefaultTypeChanged" Arrow="Links.DefaultArrow" ArrowChanged="Links.DefaultArrowChanged" />
                }
                @if (OverviewSettings != null)
                {
                    <Overview @ref="Overview"
                              Position="@OverviewSettings.Position"
                              ViewableAreaBorderColor="@OverviewSettings.ViewableAreaBorderColor"
                              ViewableAreaFillColor="@OverviewSettings.ViewableAreaFillColor"
                              ViewableAreaBorderWidth="@OverviewSettings.ViewableAreaBorderWidth"
                              BackgroundColor="@OverviewSettings.BackgroundColor"
                              FullBorder="@OverviewSettings.FullBorder"
                              BorderWidth="@OverviewSettings.BorderWidth" />
                }
            }
        </CascadingValue>
    </div>
}
@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    private ElementReference canvas;
    private Renderer node_content_renderer;
    private Renderer node_border_renderer;
    private Overview Overview;
    private NodeLibraryWrapper node_library_wrapper;
    internal SelectRegion select_region;
    internal void AddNodeContentFragment(RenderFragment<string> content) => node_content_renderer.Add(content);
    internal void AddNodeTemplateContentFragment(RenderFragment<string> content) => node_library_wrapper.Add(content);
    internal void AddNodeBorderFragment(RenderFragment<string> content) => node_border_renderer.Add(content);
    internal void RemoveNodeContentFragment(RenderFragment<string> content) => node_content_renderer.Remove(content);
    internal void RemoveNodeTemplateContentFragment(RenderFragment<string> content) => node_library_wrapper.Remove(content);
    internal void RemoveNodeBorderFragment(RenderFragment<string> content) => node_border_renderer.Remove(content);
}
