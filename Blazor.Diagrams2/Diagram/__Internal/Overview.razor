@using Excubo.Blazor.Canvas
@using Excubo.Blazor.Diagrams.Extensions
@using (var temporary_culture = new CultureSwapper())
{
<div style="position:relative; width: calc(@(Width)px + 2em); @(position) @(border) background-color: @BackgroundColor; padding: 1em">
    <svg style="position:relative; width: @(Width)px; height: @(Height)px; pointer-events: all" @onmousemove="OnMouseMove" @onmousemove:stopPropagation>
        @{
            var half_stroke = ViewableAreaBorderWidth / 2;
            <g transform="translate(@(ViewLeft + half_stroke) @(ViewTop + half_stroke))">
                <rect x="0" y="0" width="@Math.Max(1, ViewWidth - ViewableAreaBorderWidth)" height="@Math.Max(1, ViewHeight - ViewableAreaBorderWidth)" fill="@ViewableAreaFillColor" stroke="@ViewableAreaBorderColor" stroke-width="@ViewableAreaBorderWidth" style="cursor: move" />
            </g>
        }
    </svg>
    <style>
        .overview-canvas {
            pointer-events: none;
            position: absolute;
            top: 1em;
        }
    </style>
    <Canvas @ref="canvas1" width="@Width" height="@Height" class="overview-canvas" style="@(canvas_2_visible ? "display: none" : "display: block")" />
    <Canvas @ref="canvas2" width="@Width" height="@Height" class="overview-canvas" style="@(canvas_2_visible ? "display: block" : "display: none")" />
    @*<div style="position: absolute; top: 1em; width: @(Width)px; height: @(Height)px; pointer-events: all" @onmousemove="OnMouseMove" @onmousemove:stopPropagation></div>*@
</div>
}

@code {
    /// <summary>
    /// The border color for the rectangle that marks the viewable area.
    /// </summary>
    [Parameter] public string ViewableAreaBorderColor { get; set; } = "deepskyblue";
    /// <summary>
    /// The fill color for the rectangle that marks the viewable area. Make sure to select a transparent color.
    /// </summary>
    [Parameter] public string ViewableAreaFillColor { get; set; } = "transparent";
    /// <summary>
    /// The thickness of the border for the rectangle that marks the viewable area.
    /// </summary>
    [Parameter] public double ViewableAreaBorderWidth { get; set; } = 4;
    /// <summary>
    /// Whether the overview area should have a visible black border all around it.
    /// </summary>
    [Parameter] public bool FullBorder { get; set; }
    /// <summary>
    /// The thickness of the border of the overview area.
    /// </summary>
    [Parameter] public double BorderWidth { get; set; } = 2;
    [Parameter] public Position Position { get; set; }
    private string position => Position switch
    {
        Position.Top => "top: 0; margin-left: auto; margin-right: auto;",
        Position.TopRight => "top: 0; margin-left: auto;",
        Position.Right => $"margin-left: auto; top: calc(50% - {Height / 2 + BorderWidth}px);",
        Position.BottomRight => $"margin-left: auto; top: calc(100% - {Height + 2 * BorderWidth}px - 2em - 8px);",
        Position.Bottom => $"top: calc(100% - {Height + 2 * BorderWidth}px - 2em - 8px); margin-left: auto; margin-right: auto;",
        Position.BottomLeft => $"top: calc(100% - {Height + 2 * BorderWidth}px - 2em - 8px);",
        Position.Left => $"top: calc(50% - {Height / 2 + BorderWidth}px);",
        Position.TopLeft => "",
        _ => ""
    };
    private string border => FullBorder ? $"border: {BorderWidth}px solid black;" : Position switch
    {
        Position.Top => $"border-bottom: {BorderWidth}px solid black; border-left: {BorderWidth}px solid black; border-right: {BorderWidth}px solid black;",
        Position.TopRight => $"border-bottom: {BorderWidth}px solid black; border-left: {BorderWidth}px solid black;",
        Position.Right => $"border-top: {BorderWidth}px solid black; border-bottom: {BorderWidth}px solid black; border-left: {BorderWidth}px solid black;",
        Position.BottomRight => $"border-top: {BorderWidth}px solid black; border-left: {BorderWidth}px solid black;",
        Position.Bottom => $"border-top: {BorderWidth}px solid black; border-left: {BorderWidth}px solid black; border-right: {BorderWidth}px solid black;",
        Position.BottomLeft => $"border-top: {BorderWidth}px solid black; border-right: {BorderWidth}px solid black;",
        Position.Left => $"border-top: {BorderWidth}px solid black; border-bottom: {BorderWidth}px solid black; border-right: {BorderWidth}px solid black;",
        Position.TopLeft => $"border-bottom: {BorderWidth}px solid black; border-right: {BorderWidth}px solid black;",
        _ => $"border-bottom: {BorderWidth}px solid black; border-right: {BorderWidth}px solid black;"
    };
    private Canvas canvas1;
    private Canvas canvas2;
    private bool canvas_2_visible { get; set; }
}
