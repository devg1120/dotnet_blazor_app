@inherits ContentSizedNodeBase
@using Excubo.Blazor.Diagrams.Extensions
@if (Deleted || OffCanvas)
{
    return;
}
@using (var temporary_culture = new CultureSwapper())
{
    <g transform="@PositionAndScale">
        <rect width="@Width"
              height="@Height"
              @onmouseover="OnNodeOver"
              @onmouseout="OnNodeOut"
              stroke="@Stroke"
              stroke-width="2px"
              fill="@Fill"
              cursor="@(Movable ? "move" : "default")"
              pointer-events="visiblepainted"
              style="@(Hidden? "display:none;" : "") @(Selected ? "stroke-dasharray: 8 2; animation: diagram-node-selected 0.4s ease infinite;" : "")" />
    </g>
}
@code {
    public override RenderFragment border =>@<text>
        @using (var temporary_culture = new CultureSwapper())
        {
            <g transform="@PositionAndScale">
                <rect width="@Width"
                      height="@Height"
                      style="@(Hidden? "display:none" : "")"
                      stroke="@(Hovered ? "#DDDDDD7F" : "transparent")"
                      stroke-width="@(.5 / Zoom)rem"
                      fill="none"
                      cursor="pointer"
                      @onmouseover="OnBorderOver"
                      @onmouseout="OnBorderOut" />
            </g>
        }
    </text>;
    public override (double RelativeX, double RelativeY) GetDefaultPort(Position position = Position.Any)
    {
        return position switch
        {
            Position.North => (Width / 2, 0),
            Position.NorthEast => (Width, 0),
            Position.East => (Width, Height / 2),
            Position.SouthEast => (Width, Height),
            Position.South => (Width / 2, Height),
            Position.SouthWest => (0, Height),
            Position.West => (0, Height / 2),
            Position.NorthWest => (0, 0),
            Position.Center => (Width / 2, Height / 2),
            _ => (0, 0)
        };
    }
}
