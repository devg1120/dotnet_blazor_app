@page "/modification_from_code"
<SourceCodeLink Repository="Blazor.Diagrams" Page="@(nameof(AddAndRemoveFromCode))" />

<Diagram>
    <Nodes>
        @foreach (var node in nodes)
        {
            if (node.Type == NodeType.Rectangle)
            {
                <RectangleNode @key="@node.Id" Id="@node.Id" X="node.X" XChanged="(x) => { node.X = x; no_implicit_render = true; }" Y="node.Y" YChanged="(y) => { node.Y = y; no_implicit_render = true; }">
                    <div style="min-width:4em; min-height:1em">@node.Id</div>
                </RectangleNode>
            }
            else
            {
                <EllipseNode @key="@node.Id" Id="@node.Id" X="node.X" XChanged="(x) => { node.X = x; no_implicit_render = true; }" Y="node.Y" YChanged="(y) => { node.Y = y; no_implicit_render = true; }">
                    <div style="min-width:4em; min-height:1em">@node.Id</div>
                </EllipseNode>
            }
        }
    </Nodes>
    <Links>
        @foreach (var link in links)
        {
            <StraightLink @key="@((link.Source, link.Target))" Source="@link.Source" Target="@link.Target" />
        }
    </Links>
    <AutoLayoutSettings @ref="auto_layout" Algorithm="Algorithm.TreeVertical" />
    <OverviewSettings Position="Position.BottomRight" ViewableAreaBorderColor="green" ViewableAreaFillColor="white"
                      BackgroundColor="#DDDDDD" ViewableAreaBorderWidth="1" FullBorder="true" />
</Diagram>

<button @onclick="NewGraph">Random new graph</button>
<button @onclick="NewRectangle">Add rectangle</button>
<button @onclick="NewEllipse">Add ellipse</button>
<button @onclick="RemoveFirstNode">Remove first node</button>
<button @onclick="RemoveLastNode">Remove last node</button>
<button @onclick="NewLink">Add random link</button>
<button @onclick="RemoveFirstLink">Remove first link</button>

@code {
    private void NewGraph()
    {
        var rnd = new Random((int)DateTime.Now.Ticks);
        nodes.Clear();
        nodes.AddRange(Enumerable.Range(0, rnd.Next(10, 20)).Select(i => new MyNode { Id = "N" + rnd.Next(100 * i, 100 * (i + 1)).ToString(), Type = NodeType.Rectangle }));
        links.Clear();
        links.AddRange(Enumerable.Range(0, rnd.Next(10, 20))
        .Select(_ =>
        {
            var selection = nodes.OrderBy(_ => rnd.NextDouble()).Take(2).OrderBy(v => v.Id).ToList();
            return new LinkData { Source = selection[0].Id, Target = selection[1].Id };
        }));
        run_auto_layout = true;
        StateHasChanged();
    }
    private void NewRectangle()
    {
        nodes.Add(new MyNode { Id = Guid.NewGuid().ToString(), X = 100, Y = 100, Type = NodeType.Rectangle });
        run_auto_layout = true;
        StateHasChanged();
    }
    private void NewEllipse()
    {
        nodes.Add(new MyNode { Id = Guid.NewGuid().ToString(), X = 100, Y = 100, Type = NodeType.Ellipse });
        run_auto_layout = true;
        StateHasChanged();
    }
    private void RemoveFirstNode()
    {
        if (nodes.Any())
        {
            nodes.RemoveAt(0);
        }
        run_auto_layout = true;
        StateHasChanged();
    }
    private void RemoveLastNode()
    {
        if (nodes.Any())
        {
            nodes.RemoveAt(nodes.Count - 1);
        }
        run_auto_layout = true;
        StateHasChanged();
    }
    private void NewLink()
    {
        if (nodes.Count < 2)
        {
            return;
        }
        var rnd = new Random((int)DateTime.Now.Ticks);
        var source = nodes.OrderBy(_ => rnd.NextDouble()).First();
        var target = nodes.Except(new[] { source }).OrderBy(_ => rnd.NextDouble()).First();
        links.Add(new LinkData { Source = source.Id, Target = target.Id });
        run_auto_layout = true;
        StateHasChanged();
    }
    private void RemoveFirstLink()
    {
        if (links.Any())
        {
            links.RemoveAt(0);
        }
        run_auto_layout = true;
        StateHasChanged();
    }
    private AutoLayoutSettings auto_layout;
    private bool run_auto_layout;
    class MyNode
    {
        public string Id { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
        public NodeType Type { get; set; }
    }
    private List<MyNode> nodes = new List<MyNode>
    {
    };
    private List<LinkData> links = new List<LinkData>
    {
    };
    private bool no_implicit_render;
    protected override bool ShouldRender()
    {
        if (no_implicit_render)
        {
            no_implicit_render = false;
            return false;
        }
        return base.ShouldRender();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (run_auto_layout)
        {
            auto_layout.Run();
            run_auto_layout = false;
        }
    }
}
